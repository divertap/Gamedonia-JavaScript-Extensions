[Gamedonia]

# prefix that will be removed from the ObjC classes in order to generate the JS classes
# ex: If the class name is CCNode, then on JavaScript it will be Node
obj_class_prefix_to_remove = GD

# Classes to generate. Use '*' to generate all the parsed classes.
# Subclasses will be parsed as well.
# ex: If CCSprite is parsed, then CCNode and NSObject will be parsed as well
# It supports regular expressions to match class names.
# eg: all cocos2d actions ending in 'By': CC(.*)By
classes_to_parse = OpenUDID,
					Gamedonia,
					GamedoniaData,
					GamedoniaScript,
					GamedoniaPush,
					GamedoniaDevice,
					GamedoniaRequest,
					GamedoniaUsers,
					GDDeviceProfile,
					GDSessionToken,
					Credentials,
					GDUser,
					GDUserProfile,
					GDPaymentTransaction,
					GamedoniaInAppPurchases,
					GDPurchaseDelegateAdapter,

# Classes to ignore.
# It is a good idea to add classes that you don't want to have a proxy object. Usually internal classes,
# or classes that are already native on JavaScript should be added here.
# It supports regular expressions to match class names.
# eg: all NS classes: NS(.*)
classes_to_ignore = AF(.*),JSONKit(.*),NS(.*),UI(.*),SK(.*)

# Class properties
# Options
#  manual               Means that the class is manually bound. No binding info will generated, but it can be used.
#  name:"newname"       New name of the class
#  ignore               The class will not be bound, and no references to it will be created
#  reserved_slots       How many slots it should be reserved for this class. Needed to 'root' jsvals
class_properties = NSDictionary = manual,
					NSMutableDictionary = manual,
					NSArray = manual,
					NSMutableArray = manual,
					NSURLRequest = manual,
					NSObject = manual,
					NSHTTPURLResponse = manual,
					NSError = manual,
					GamedoniaData = name : "Data"; reserved_slots:2,
					GamedoniaUsers = name : "Users"; reserved_slots:2,
					GamedoniaRequest = name : "Request"; reserved_slots:2,
					GamedoniaDevice = name : "Device"; reserved_slots:2,
					GamedoniaPush = name : "Push",
					GamedoniaScript = name : "Script"; reserved_slots:2,
					GamedoniaInAppPurchases = name : "Purchase",
					GDPurchaseDelegateAdapter = name:"PurchaseDelegate",

# Whether or not to generate constructors from base classes for the current class.
# In JavaScript, the "constructors" or "static methods" are not "inherited".
# It is recommended to set it to "auto".
# Options:
#    False: Don't inherited
#    True: Inherit all class methods from all ancestors
#    Auto: Inherit only if it has no class constructors. Stop when the fist class constructor is added.
inherit_class_methods = Auto

# Files that are going to be imported by the auto-generated files.
# Useful to declare subclasses of an already bound project
# eg: manual bindings for NSObject
import_files = OpenUDID.h,Gamedonia.h,GDDeviceProfile.h,GDSessionToken.h,GDUser.h,GDPaymentTransaction.h,GDPurchaseDelegateAdapter.h,js_bindings_NS_manual.h

# Rules used for methods:
# options:
#   name:"js_name"         Rename methods.
#   ignore                 This method will be ignored.
#   callback               This method is a callback. It will be invoked from Objective-C
#   no_swizzle             It means that the callback function is an optional protocol and should not be "swizzled" because there is no implementation for it.
#   variadic_2_array       It means that all arguments are variadic, and an Array will be created with them
#   merge:name | name...   List of methods names that should be merged with this method as well.
#   manual                 It means that its implementation won't be auto-generated. It is implemented manually
#
#  Regular expressions are supported in the Class names, but not in the Method names
#
method_properties = OpenUDID # value = name: "create",
					OpenUDID # valueWithError: = ignore,
					Gamedonia # users = name: "getUsers",
					Gamedonia # newUsers = name: "getNewUsers",
					Gamedonia # data = name: "getData",
					Gamedonia # newData = name: "getNewData",
					Gamedonia # push = name: "getPush",
					Gamedonia # newPush = name: "getNewPush",
					Gamedonia # device = name: "getDevice",
					Gamedonia # newDevice = name: "getNewDevice",
					Gamedonia # script = name: "getScript",
					Gamedonia # newScript = name: "getNewScript",
					Gamedonia # purchase = name: "getPurchase",
					Gamedonia # newPurchase = name: "getNewPurchase",
					Gamedonia # file = ignore,
					Gamedonia # newFile = ignore,
					Gamedonia # isDebug = ignore,
					Gamedonia # operationsQueue = ignore,
					Gamedonia # initialize:secret:apiServerUrl:apiVersion: = ignore,
					Gamedonia # initializeWithOptions:secret:apiServerUrl:apiVersion:options: = ignore,
					GamedoniaDevice # registerDevice:callback: = name: "registerWithCallback"; manual,
					GamedoniaPush # addEventListener: = ignore,
					GamedoniaPush # removeEventListener: = ignore,
					GamedoniaPush # registerDeviceToken: = name: "register"; manual,
					GamedoniaData # create:entity:callback: = name: "createWithCallback"; manual,
					GamedoniaData # remove:entityId:callback: = name: "removeWithCallback"; manual,
					GamedoniaData # update:entity:overwrite:callback: = name: "updateWithCallback"; manual,
					GamedoniaData # get:entityId:callback: = name: "getWithCallback"; manual,
					GamedoniaData # search:query:limit:sort:skip:callback: = name: "searchWithCallback"; merge: "search:query:limit:sort:callback:" | "search:query:limit:callback:" |  "search:query:callback:"; manual,
					GamedoniaRequest # initialize:secret:apiServerUrl:apiVersion: = ignore,
					GamedoniaRequest # post:content:auth:sessionToken:gameid:success:failure: = name: "postWithCallback"; merge: "post:content:success:failure:"; manual,
					GamedoniaRequest # get:sessionToken:success:failure: = name: "getWithCallback"; manual,
					GamedoniaRequest # put:content:auth:sessionToken:gameid:success:failure: = name: "putWithCallback"; manual,
					GamedoniaRequest # del:success:failure: = name: "delWithCallback"; manual,
					GamedoniaRequest # hmacsha1:secret: = name: "getHmacsha1"; manual,
					GamedoniaRequest # md5: = name: "getMd5",
					GamedoniaRequest # sign:secret:data:contentType:date:requestMethod:path: = name: "sign"; merge: "sign:secret:date:requestMethod:path:"; manual,
					GamedoniaUsers # createUser:callback: = name: "createWithCallback"; manual,
					GamedoniaUsers # loginUserWithGameCenterId:callback: = name: "loginWithGameCenterIdAndCallback"; manual,
					GamedoniaUsers # loginUserWithOpenUDID: = name: "loginWithOpenUDIDAndCallback"; manual,
					GamedoniaUsers # loginUserWithEmail:password:callback: = name: "loginWithEmailAndCallback"; manual,
					GamedoniaUsers # loginUserWithFacebook:fbAccessToken:callback: = name: "loginWithFacebookAndCallback"; manual,
					GamedoniaUsers # loginUserWithTwitter:twTokenSecret:twToken:callback: = name: "loginWithTwitterAndCallback"; manual,
					GamedoniaUsers # loginUserWithSessionToken:callback: = name: "loginWithSessionTokenAndCallback"; manual,
					GamedoniaUsers # logoutUser: = name: "logoutWithCallback"; manual,
					GamedoniaUsers # getUser:callback: = name: "getWithCallback"; manual,
					GamedoniaUsers # getMe: = name: "getMeWithCallback"; manual,
					GamedoniaUsers # updateUser:overwrite:callback: = name: "updateWithCallback"; manual,
					GamedoniaUsers # changePassword:currentPassword:newPassword:callback: = name: "changePasswordWithCallback"; manual,
					GamedoniaUsers # resetPassword:callback: = name: "resetPasswordWithCallback"; manual,
					GamedoniaUsers # restorePassword:newPassword:callback: = name: "restorePasswordWithCallback"; manual,
					GamedoniaUsers # search:limit:sort:skip:callback: = name: "searchWithCallback"; manual,
					GamedoniaUsers # me = name: "getMe",
					GamedoniaUsers # session_token = name: "getSessionToken",
					Credentials # init = name: "create",
					Credentials # fb_uid = name: "getFbUID",
					Credentials # tw_uid = name: "getTwID",
					Credentials # open_udid = name: "getOpenUDID",
					Credentials # setOpen_udid: = name: "setOpenUDID",
					Credentials # gamecenter_id = name: "getGamecenterID",
					GDSessionToken # session_token = name: "getSessionToken",
					GDSessionToken # expiration_date = name: "getExpirationDate",
					GDUser # credentials = name: "getCredentials",
					GDUserProfile # _id = name: "getId",
					GDUserProfile # profile = name: "getProfile",
					GDDeviceProfile # deviceId = name: "getDeviceID",
					GDDeviceProfile # deviceToken = name: "getDeviceToken",
					GDDeviceProfile # deviceType = name: "getDeviceType",
					GDDeviceProfile # uid = name: "getUID",
					GDDeviceProfile # language = name: "getLanguage",
					GDDeviceProfile # country = name: "getCountry",
					GDDeviceProfile # timeZoneGMTOffset = name: "getTimeZoneGMTOffset",
					GamedoniaScript # run:parameters:callback: = name: "runWithCallback"; manual,
					GDPaymentTransaction # success = name: "getSuccess",
					GDPaymentTransaction # status = name: "getStatus",
					GDPaymentTransaction # identifier = name: "getIdentifier",
					GDPaymentTransaction # transactionId = name: "getTransactionId",
					GDPaymentTransaction # receipt = name: "getReceipt",
					GamedoniaInAppPurchases # requestProducts: = name: "requestProducts",
					GamedoniaInAppPurchases # initWithProductIdentifiers: = ignore,
					GamedoniaInAppPurchases # buyProductIdentifier: = name: "buyProductIdentifier",
					GamedoniaInAppPurchases # canMakePayments = name: "canMakePayments",
					GamedoniaInAppPurchases # getSKProductByIdentifier: = ignore,
					GamedoniaInAppPurchases # delegate = name: "getDelegate"; manual,
					GDPurchaseDelegateAdapter # productsRequested: = callback; manual,
					GDPurchaseDelegateAdapter # productPurchased: = callback; manual,					

# BridgeSupport files
# add as many as you need. Usually you will only one.
bridge_support_file = Gamedonia.bridgesupport

# File that contains information that complements BridgeSupport (not present on BridgeSupport file)
complement_file = Gamedonia-complement.txt
