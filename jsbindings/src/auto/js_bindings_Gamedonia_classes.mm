/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by "generate_js_bindings.py -c Gamedonia.jsb.ini" on 2013-03-20
* Script version: v0.3
*/
#import "js_bindings_config.h"
#ifdef JSB_INCLUDE_GAMEDONIA

#import "OpenUDID.h"
#import "Gamedonia.h"
#import "GDDeviceProfile.h"
#import "GDSessionToken.h"
#import "GDUser.h"
#import "js_bindings_NS_manual.h"

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jsfriendapi.h"
#import "js_bindings_config.h"
#import "js_bindings_core.h"

#import "js_bindings_Gamedonia_classes.h"


/*
 * GDSessionToken
 */
#pragma mark - GDSessionToken

JSClass* JSB_GDSessionToken_class = NULL;
JSObject* JSB_GDSessionToken_object = NULL;
// Constructor
JSBool JSB_GDSessionToken_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GDSessionToken createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GDSessionToken_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GDSessionToken)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GDSessionToken_expiration_date(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GDSessionToken *real = (GDSessionToken*) [proxy realObj];
	ret_val = [real expiration_date ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: NSObject*
// Ret value: void (None)
JSBool JSB_GDSessionToken_fromJSON_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDSessionToken *real = (GDSessionToken*) [proxy realObj];
	[real fromJSON:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GDSessionToken_session_token(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GDSessionToken *real = (GDSessionToken*) [proxy realObj];
	ret_val = [real session_token ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GDSessionToken_setExpiration_date_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDSessionToken *real = (GDSessionToken*) [proxy realObj];
	[real setExpiration_date:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GDSessionToken_setSession_token_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDSessionToken *real = (GDSessionToken*) [proxy realObj];
	[real setSession_token:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSB_GDSessionToken_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GDSessionToken_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GDSessionToken_class->name = name;
	JSB_GDSessionToken_class->addProperty = JS_PropertyStub;
	JSB_GDSessionToken_class->delProperty = JS_PropertyStub;
	JSB_GDSessionToken_class->getProperty = JS_PropertyStub;
	JSB_GDSessionToken_class->setProperty = JS_StrictPropertyStub;
	JSB_GDSessionToken_class->enumerate = JS_EnumerateStub;
	JSB_GDSessionToken_class->resolve = JS_ResolveStub;
	JSB_GDSessionToken_class->convert = JS_ConvertStub;
	JSB_GDSessionToken_class->finalize = JSB_GDSessionToken_finalize;
	JSB_GDSessionToken_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("getExpirationDate", JSB_GDSessionToken_expiration_date, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("fromJSON", JSB_GDSessionToken_fromJSON_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getSessionToken", JSB_GDSessionToken_session_token, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setExpiration_date", JSB_GDSessionToken_setExpiration_date_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setSession_token", JSB_GDSessionToken_setSession_token_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_GDSessionToken_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_GDSessionToken_class, JSB_GDSessionToken_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GDSessionToken

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GDSessionToken_class, JSB_GDSessionToken_object, NULL);
	JSB_GDSessionToken *proxy = [[JSB_GDSessionToken alloc] initWithJSObject:jsobj class:[GDSessionToken class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * GDUserProfile
 */
#pragma mark - GDUserProfile

JSClass* JSB_GDUserProfile_class = NULL;
JSObject* JSB_GDUserProfile_object = NULL;
// Constructor
JSBool JSB_GDUserProfile_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GDUserProfile createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GDUserProfile_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GDUserProfile)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GDUserProfile__id(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GDUserProfile *real = (GDUserProfile*) [proxy realObj];
	ret_val = [real _id ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: NSObject*
// Ret value: void (None)
JSBool JSB_GDUserProfile_fromJSON_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDUserProfile *real = (GDUserProfile*) [proxy realObj];
	[real fromJSON:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableDictionary* (o)
JSBool JSB_GDUserProfile_profile(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableDictionary* ret_val;

	GDUserProfile *real = (GDUserProfile*) [proxy realObj];
	ret_val = [real profile ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: NSMutableDictionary*
// Ret value: void (None)
JSBool JSB_GDUserProfile_setProfile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDUserProfile *real = (GDUserProfile*) [proxy realObj];
	[real setProfile:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GDUserProfile_set_id_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDUserProfile *real = (GDUserProfile*) [proxy realObj];
	[real set_id:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSDictionary* (dict)
JSBool JSB_GDUserProfile_toDictionary(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSDictionary* ret_val;

	GDUserProfile *real = (GDUserProfile*) [proxy realObj];
	ret_val = [real toDictionary ];

	jsval ret_jsval = NSDictionary_to_jsval( cx, (NSDictionary*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

void JSB_GDUserProfile_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GDUserProfile_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GDUserProfile_class->name = name;
	JSB_GDUserProfile_class->addProperty = JS_PropertyStub;
	JSB_GDUserProfile_class->delProperty = JS_PropertyStub;
	JSB_GDUserProfile_class->getProperty = JS_PropertyStub;
	JSB_GDUserProfile_class->setProperty = JS_StrictPropertyStub;
	JSB_GDUserProfile_class->enumerate = JS_EnumerateStub;
	JSB_GDUserProfile_class->resolve = JS_ResolveStub;
	JSB_GDUserProfile_class->convert = JS_ConvertStub;
	JSB_GDUserProfile_class->finalize = JSB_GDUserProfile_finalize;
	JSB_GDUserProfile_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("getId", JSB_GDUserProfile__id, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("fromJSON", JSB_GDUserProfile_fromJSON_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getProfile", JSB_GDUserProfile_profile, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setProfile", JSB_GDUserProfile_setProfile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("set_id", JSB_GDUserProfile_set_id_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("toDictionary", JSB_GDUserProfile_toDictionary, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_GDUserProfile_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_GDUserProfile_class, JSB_GDUserProfile_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GDUserProfile

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GDUserProfile_class, JSB_GDUserProfile_object, NULL);
	JSB_GDUserProfile *proxy = [[JSB_GDUserProfile alloc] initWithJSObject:jsobj class:[GDUserProfile class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * GDUser
 */
#pragma mark - GDUser

JSClass* JSB_GDUser_class = NULL;
JSObject* JSB_GDUser_object = NULL;
// Constructor
JSBool JSB_GDUser_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GDUser createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GDUser_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GDUser)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: Credentials* (o)
JSBool JSB_GDUser_credentials(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	Credentials* ret_val;

	GDUser *real = (GDUser*) [proxy realObj];
	ret_val = [real credentials ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: Credentials*
// Ret value: void (None)
JSBool JSB_GDUser_setCredentials_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDUser *real = (GDUser*) [proxy realObj];
	[real setCredentials:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSDictionary* (dict)
JSBool JSB_GDUser_toDictionary(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSDictionary* ret_val;

	GDUser *real = (GDUser*) [proxy realObj];
	ret_val = [real toDictionary ];

	jsval ret_jsval = NSDictionary_to_jsval( cx, (NSDictionary*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

void JSB_GDUser_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GDUser_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GDUser_class->name = name;
	JSB_GDUser_class->addProperty = JS_PropertyStub;
	JSB_GDUser_class->delProperty = JS_PropertyStub;
	JSB_GDUser_class->getProperty = JS_PropertyStub;
	JSB_GDUser_class->setProperty = JS_StrictPropertyStub;
	JSB_GDUser_class->enumerate = JS_EnumerateStub;
	JSB_GDUser_class->resolve = JS_ResolveStub;
	JSB_GDUser_class->convert = JS_ConvertStub;
	JSB_GDUser_class->finalize = JSB_GDUser_finalize;
	JSB_GDUser_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("getCredentials", JSB_GDUser_credentials, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setCredentials", JSB_GDUser_setCredentials_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("toDictionary", JSB_GDUser_toDictionary, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_GDUser_object = JS_InitClass(cx, globalObj, JSB_GDUserProfile_object, JSB_GDUser_class, JSB_GDUser_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GDUser

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GDUser_class, JSB_GDUser_object, NULL);
	JSB_GDUser *proxy = [[JSB_GDUser alloc] initWithJSObject:jsobj class:[GDUser class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * GamedoniaScript
 */
#pragma mark - GamedoniaScript

JSClass* JSB_GamedoniaScript_class = NULL;
JSObject* JSB_GamedoniaScript_object = NULL;
// Constructor
JSBool JSB_GamedoniaScript_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GamedoniaScript createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GamedoniaScript_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GamedoniaScript)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

void JSB_GamedoniaScript_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GamedoniaScript_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GamedoniaScript_class->name = name;
	JSB_GamedoniaScript_class->addProperty = JS_PropertyStub;
	JSB_GamedoniaScript_class->delProperty = JS_PropertyStub;
	JSB_GamedoniaScript_class->getProperty = JS_PropertyStub;
	JSB_GamedoniaScript_class->setProperty = JS_StrictPropertyStub;
	JSB_GamedoniaScript_class->enumerate = JS_EnumerateStub;
	JSB_GamedoniaScript_class->resolve = JS_ResolveStub;
	JSB_GamedoniaScript_class->convert = JS_ConvertStub;
	JSB_GamedoniaScript_class->finalize = JSB_GamedoniaScript_finalize;
	JSB_GamedoniaScript_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("runWithCallback", JSB_GamedoniaScript_run_parameters_callback_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_GamedoniaScript_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_GamedoniaScript_class, JSB_GamedoniaScript_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GamedoniaScript

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GamedoniaScript_class, JSB_GamedoniaScript_object, NULL);
	JSB_GamedoniaScript *proxy = [[JSB_GamedoniaScript alloc] initWithJSObject:jsobj class:[GamedoniaScript class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * Gamedonia
 */
#pragma mark - Gamedonia

JSClass* JSB_Gamedonia_class = NULL;
JSObject* JSB_Gamedonia_object = NULL;
// Constructor
JSBool JSB_Gamedonia_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_Gamedonia createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_Gamedonia_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (Gamedonia)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: GamedoniaData* (o)
JSBool JSB_Gamedonia_data_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaData* ret_val;

	ret_val = [Gamedonia data ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GamedoniaDevice* (o)
JSBool JSB_Gamedonia_device_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaDevice* ret_val;

	ret_val = [Gamedonia device ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_Gamedonia_isDebug_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	ret_val = [Gamedonia isDebug ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: GamedoniaData* (o)
JSBool JSB_Gamedonia_newData_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaData* ret_val;

	ret_val = [Gamedonia newData ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GamedoniaDevice* (o)
JSBool JSB_Gamedonia_newDevice_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaDevice* ret_val;

	ret_val = [Gamedonia newDevice ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GamedoniaPush* (o)
JSBool JSB_Gamedonia_newPush_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaPush* ret_val;

	ret_val = [Gamedonia newPush ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GamedoniaScript* (o)
JSBool JSB_Gamedonia_newScript_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaScript* ret_val;

	ret_val = [Gamedonia newScript ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GamedoniaUsers* (o)
JSBool JSB_Gamedonia_newUsers_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaUsers* ret_val;

	ret_val = [Gamedonia newUsers ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GamedoniaPush* (o)
JSBool JSB_Gamedonia_push_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaPush* ret_val;

	ret_val = [Gamedonia push ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GamedoniaScript* (o)
JSBool JSB_Gamedonia_script_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaScript* ret_val;

	ret_val = [Gamedonia script ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: GamedoniaUsers* (o)
JSBool JSB_Gamedonia_users_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GamedoniaUsers* ret_val;

	ret_val = [Gamedonia users ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

void JSB_Gamedonia_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_Gamedonia_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_Gamedonia_class->name = name;
	JSB_Gamedonia_class->addProperty = JS_PropertyStub;
	JSB_Gamedonia_class->delProperty = JS_PropertyStub;
	JSB_Gamedonia_class->getProperty = JS_PropertyStub;
	JSB_Gamedonia_class->setProperty = JS_StrictPropertyStub;
	JSB_Gamedonia_class->enumerate = JS_EnumerateStub;
	JSB_Gamedonia_class->resolve = JS_ResolveStub;
	JSB_Gamedonia_class->convert = JS_ConvertStub;
	JSB_Gamedonia_class->finalize = JSB_Gamedonia_finalize;
	JSB_Gamedonia_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("getData", JSB_Gamedonia_data_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getDevice", JSB_Gamedonia_device_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isDebug", JSB_Gamedonia_isDebug_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getNewData", JSB_Gamedonia_newData_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getNewDevice", JSB_Gamedonia_newDevice_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getNewPush", JSB_Gamedonia_newPush_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getNewScript", JSB_Gamedonia_newScript_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getNewUsers", JSB_Gamedonia_newUsers_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getPush", JSB_Gamedonia_push_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getScript", JSB_Gamedonia_script_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getUsers", JSB_Gamedonia_users_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSB_Gamedonia_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_Gamedonia_class, JSB_Gamedonia_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_Gamedonia

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_Gamedonia_class, JSB_Gamedonia_object, NULL);
	JSB_Gamedonia *proxy = [[JSB_Gamedonia alloc] initWithJSObject:jsobj class:[Gamedonia class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * GamedoniaUsers
 */
#pragma mark - GamedoniaUsers

JSClass* JSB_GamedoniaUsers_class = NULL;
JSObject* JSB_GamedoniaUsers_object = NULL;
// Constructor
JSBool JSB_GamedoniaUsers_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GamedoniaUsers createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GamedoniaUsers_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GamedoniaUsers)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: NSObject*
// Ret value: void (None)
JSBool JSB_GamedoniaUsers_addEventListener_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GamedoniaUsers *real = (GamedoniaUsers*) [proxy realObj];
	[real addEventListener:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GamedoniaUsers_getSessionToken(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GamedoniaUsers *real = (GamedoniaUsers*) [proxy realObj];
	ret_val = [real getSessionToken ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_GamedoniaUsers_isLoggedIn(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	GamedoniaUsers *real = (GamedoniaUsers*) [proxy realObj];
	ret_val = [real isLoggedIn ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: GDUserProfile* (o)
JSBool JSB_GamedoniaUsers_me(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GDUserProfile* ret_val;

	GamedoniaUsers *real = (GamedoniaUsers*) [proxy realObj];
	ret_val = [real me ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: NSObject*
// Ret value: void (None)
JSBool JSB_GamedoniaUsers_removeEventListener_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GamedoniaUsers *real = (GamedoniaUsers*) [proxy realObj];
	[real removeEventListener:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: GDSessionToken* (o)
JSBool JSB_GamedoniaUsers_session_token(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GDSessionToken* ret_val;

	GamedoniaUsers *real = (GamedoniaUsers*) [proxy realObj];
	ret_val = [real session_token ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: GDUserProfile*
// Ret value: void (None)
JSBool JSB_GamedoniaUsers_setMe_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GamedoniaUsers *real = (GamedoniaUsers*) [proxy realObj];
	[real setMe:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: GDSessionToken*
// Ret value: void (None)
JSBool JSB_GamedoniaUsers_setSession_token_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GamedoniaUsers *real = (GamedoniaUsers*) [proxy realObj];
	[real setSession_token:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSB_GamedoniaUsers_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GamedoniaUsers_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GamedoniaUsers_class->name = name;
	JSB_GamedoniaUsers_class->addProperty = JS_PropertyStub;
	JSB_GamedoniaUsers_class->delProperty = JS_PropertyStub;
	JSB_GamedoniaUsers_class->getProperty = JS_PropertyStub;
	JSB_GamedoniaUsers_class->setProperty = JS_StrictPropertyStub;
	JSB_GamedoniaUsers_class->enumerate = JS_EnumerateStub;
	JSB_GamedoniaUsers_class->resolve = JS_ResolveStub;
	JSB_GamedoniaUsers_class->convert = JS_ConvertStub;
	JSB_GamedoniaUsers_class->finalize = JSB_GamedoniaUsers_finalize;
	JSB_GamedoniaUsers_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("addEventListener", JSB_GamedoniaUsers_addEventListener_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("changePasswordWithCallback", JSB_GamedoniaUsers_changePassword_currentPassword_newPassword_callback_, 4, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("createWithCallback", JSB_GamedoniaUsers_createUser_callback_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getMeWithCallback", JSB_GamedoniaUsers_getMe_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getSessionToken", JSB_GamedoniaUsers_getSessionToken, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getWithCallback", JSB_GamedoniaUsers_getUser_callback_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isLoggedIn", JSB_GamedoniaUsers_isLoggedIn, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("loginWithEmailAndCallback", JSB_GamedoniaUsers_loginUserWithEmail_password_callback_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("loginWithFacebookAndCallback", JSB_GamedoniaUsers_loginUserWithFacebook_fbAccessToken_callback_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("loginWithGameCenterIdAndCallback", JSB_GamedoniaUsers_loginUserWithGameCenterId_callback_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("loginWithOpenUDIDAndCallback", JSB_GamedoniaUsers_loginUserWithOpenUDID_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("loginWithSessionTokenAndCallback", JSB_GamedoniaUsers_loginUserWithSessionToken_callback_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("loginWithTwitterAndCallback", JSB_GamedoniaUsers_loginUserWithTwitter_twTokenSecret_twToken_callback_, 4, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("logoutWithCallback", JSB_GamedoniaUsers_logoutUser_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getMe", JSB_GamedoniaUsers_me, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("removeEventListener", JSB_GamedoniaUsers_removeEventListener_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("resetPasswordWithCallback", JSB_GamedoniaUsers_resetPassword_callback_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("restorePasswordWithCallback", JSB_GamedoniaUsers_restorePassword_newPassword_callback_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("searchWithCallback", JSB_GamedoniaUsers_search_limit_sort_skip_callback_, 5, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getSessionToken", JSB_GamedoniaUsers_session_token, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setMe", JSB_GamedoniaUsers_setMe_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setSession_token", JSB_GamedoniaUsers_setSession_token_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("updateWithCallback", JSB_GamedoniaUsers_updateUser_overwrite_callback_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_GamedoniaUsers_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_GamedoniaUsers_class, JSB_GamedoniaUsers_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GamedoniaUsers

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GamedoniaUsers_class, JSB_GamedoniaUsers_object, NULL);
	JSB_GamedoniaUsers *proxy = [[JSB_GamedoniaUsers alloc] initWithJSObject:jsobj class:[GamedoniaUsers class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * GDDeviceProfile
 */
#pragma mark - GDDeviceProfile

JSClass* JSB_GDDeviceProfile_class = NULL;
JSObject* JSB_GDDeviceProfile_object = NULL;
// Constructor
JSBool JSB_GDDeviceProfile_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GDDeviceProfile createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GDDeviceProfile_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GDDeviceProfile)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GDDeviceProfile_country(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	ret_val = [real country ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GDDeviceProfile_deviceId(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	ret_val = [real deviceId ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GDDeviceProfile_deviceToken(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	ret_val = [real deviceToken ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GDDeviceProfile_deviceType(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	ret_val = [real deviceType ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: NSObject*
// Ret value: void (None)
JSBool JSB_GDDeviceProfile_fromJSON_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	[real fromJSON:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GDDeviceProfile_language(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	ret_val = [real language ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GDDeviceProfile_setCountry_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	[real setCountry:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GDDeviceProfile_setDeviceId_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	[real setDeviceId:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GDDeviceProfile_setDeviceToken_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	[real setDeviceToken:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GDDeviceProfile_setDeviceType_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	[real setDeviceType:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GDDeviceProfile_setLanguage_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	[real setLanguage:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GDDeviceProfile_setUid_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	[real setUid:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSDictionary* (dict)
JSBool JSB_GDDeviceProfile_toDictionary(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSDictionary* ret_val;

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	ret_val = [real toDictionary ];

	jsval ret_jsval = NSDictionary_to_jsval( cx, (NSDictionary*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GDDeviceProfile_uid(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	GDDeviceProfile *real = (GDDeviceProfile*) [proxy realObj];
	ret_val = [real uid ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

void JSB_GDDeviceProfile_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GDDeviceProfile_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GDDeviceProfile_class->name = name;
	JSB_GDDeviceProfile_class->addProperty = JS_PropertyStub;
	JSB_GDDeviceProfile_class->delProperty = JS_PropertyStub;
	JSB_GDDeviceProfile_class->getProperty = JS_PropertyStub;
	JSB_GDDeviceProfile_class->setProperty = JS_StrictPropertyStub;
	JSB_GDDeviceProfile_class->enumerate = JS_EnumerateStub;
	JSB_GDDeviceProfile_class->resolve = JS_ResolveStub;
	JSB_GDDeviceProfile_class->convert = JS_ConvertStub;
	JSB_GDDeviceProfile_class->finalize = JSB_GDDeviceProfile_finalize;
	JSB_GDDeviceProfile_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("getCountry", JSB_GDDeviceProfile_country, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getDeviceID", JSB_GDDeviceProfile_deviceId, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getDeviceToken", JSB_GDDeviceProfile_deviceToken, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getDeviceType", JSB_GDDeviceProfile_deviceType, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("fromJSON", JSB_GDDeviceProfile_fromJSON_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getLanguage", JSB_GDDeviceProfile_language, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setCountry", JSB_GDDeviceProfile_setCountry_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setDeviceId", JSB_GDDeviceProfile_setDeviceId_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setDeviceToken", JSB_GDDeviceProfile_setDeviceToken_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setDeviceType", JSB_GDDeviceProfile_setDeviceType_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setLanguage", JSB_GDDeviceProfile_setLanguage_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setUid", JSB_GDDeviceProfile_setUid_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("toDictionary", JSB_GDDeviceProfile_toDictionary, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getUID", JSB_GDDeviceProfile_uid, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_GDDeviceProfile_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_GDDeviceProfile_class, JSB_GDDeviceProfile_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GDDeviceProfile

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GDDeviceProfile_class, JSB_GDDeviceProfile_object, NULL);
	JSB_GDDeviceProfile *proxy = [[JSB_GDDeviceProfile alloc] initWithJSObject:jsobj class:[GDDeviceProfile class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * GamedoniaPush
 */
#pragma mark - GamedoniaPush

JSClass* JSB_GamedoniaPush_class = NULL;
JSObject* JSB_GamedoniaPush_object = NULL;
// Constructor
JSBool JSB_GamedoniaPush_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GamedoniaPush createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GamedoniaPush_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GamedoniaPush)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: GDDeviceProfile*
// Ret value: void (None)
JSBool JSB_GamedoniaPush_buildGDDeviceProfile_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GamedoniaPush *real = (GamedoniaPush*) [proxy realObj];
	[real buildGDDeviceProfile:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSB_GamedoniaPush_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GamedoniaPush_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GamedoniaPush_class->name = name;
	JSB_GamedoniaPush_class->addProperty = JS_PropertyStub;
	JSB_GamedoniaPush_class->delProperty = JS_PropertyStub;
	JSB_GamedoniaPush_class->getProperty = JS_PropertyStub;
	JSB_GamedoniaPush_class->setProperty = JS_StrictPropertyStub;
	JSB_GamedoniaPush_class->enumerate = JS_EnumerateStub;
	JSB_GamedoniaPush_class->resolve = JS_ResolveStub;
	JSB_GamedoniaPush_class->convert = JS_ConvertStub;
	JSB_GamedoniaPush_class->finalize = JSB_GamedoniaPush_finalize;
	JSB_GamedoniaPush_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("register", JSB_GamedoniaPush_registerDeviceToken_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("buildGDDeviceProfile", JSB_GamedoniaPush_buildGDDeviceProfile_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_GamedoniaPush_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_GamedoniaPush_class, JSB_GamedoniaPush_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GamedoniaPush

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GamedoniaPush_class, JSB_GamedoniaPush_object, NULL);
	JSB_GamedoniaPush *proxy = [[JSB_GamedoniaPush alloc] initWithJSObject:jsobj class:[GamedoniaPush class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * GamedoniaRequest
 */
#pragma mark - GamedoniaRequest

JSClass* JSB_GamedoniaRequest_class = NULL;
JSObject* JSB_GamedoniaRequest_object = NULL;
// Constructor
JSBool JSB_GamedoniaRequest_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GamedoniaRequest createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GamedoniaRequest_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GamedoniaRequest)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_GamedoniaRequest_getCurrentDate_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	ret_val = [GamedoniaRequest getCurrentDate ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: NSString* (S)
JSBool JSB_GamedoniaRequest_md5__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	NSString* ret_val;

	ret_val = [GamedoniaRequest md5:(NSString*)arg0  ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

void JSB_GamedoniaRequest_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GamedoniaRequest_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GamedoniaRequest_class->name = name;
	JSB_GamedoniaRequest_class->addProperty = JS_PropertyStub;
	JSB_GamedoniaRequest_class->delProperty = JS_PropertyStub;
	JSB_GamedoniaRequest_class->getProperty = JS_PropertyStub;
	JSB_GamedoniaRequest_class->setProperty = JS_StrictPropertyStub;
	JSB_GamedoniaRequest_class->enumerate = JS_EnumerateStub;
	JSB_GamedoniaRequest_class->resolve = JS_ResolveStub;
	JSB_GamedoniaRequest_class->convert = JS_ConvertStub;
	JSB_GamedoniaRequest_class->finalize = JSB_GamedoniaRequest_finalize;
	JSB_GamedoniaRequest_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("delWithCallback", JSB_GamedoniaRequest_del_success_failure__static, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getWithCallback", JSB_GamedoniaRequest_get_sessionToken_success_failure__static, 4, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getCurrentDate", JSB_GamedoniaRequest_getCurrentDate_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getHmacsha1", JSB_GamedoniaRequest_hmacsha1_secret__static, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getMd5", JSB_GamedoniaRequest_md5__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("postWithCallback", JSB_GamedoniaRequest_post_content_auth_sessionToken_gameid_success_failure__static, 7, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("putWithCallback", JSB_GamedoniaRequest_put_content_auth_sessionToken_gameid_success_failure__static, 7, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("sign", JSB_GamedoniaRequest_sign_secret_data_contentType_date_requestMethod_path__static, 7, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSB_GamedoniaRequest_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_GamedoniaRequest_class, JSB_GamedoniaRequest_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GamedoniaRequest

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GamedoniaRequest_class, JSB_GamedoniaRequest_object, NULL);
	JSB_GamedoniaRequest *proxy = [[JSB_GamedoniaRequest alloc] initWithJSObject:jsobj class:[GamedoniaRequest class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * Credentials
 */
#pragma mark - Credentials

JSClass* JSB_Credentials_class = NULL;
JSObject* JSB_Credentials_object = NULL;
// Constructor
JSBool JSB_Credentials_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_Credentials createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_Credentials_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (Credentials)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_Credentials_email(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real email ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_Credentials_fb_access_token(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real fb_access_token ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_Credentials_fb_uid(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real fb_uid ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_Credentials_gamecenter_id(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real gamecenter_id ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: None (None)
JSBool JSB_Credentials_init(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && ![proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );

	Credentials *real = [(Credentials*)[proxy.klass alloc] init ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_Credentials_open_udid(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real open_udid ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_Credentials_password(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real password ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_Credentials_setEmail_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	Credentials *real = (Credentials*) [proxy realObj];
	[real setEmail:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_Credentials_setFb_access_token_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	Credentials *real = (Credentials*) [proxy realObj];
	[real setFb_access_token:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_Credentials_setFb_uid_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	Credentials *real = (Credentials*) [proxy realObj];
	[real setFb_uid:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_Credentials_setGamecenter_id_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	Credentials *real = (Credentials*) [proxy realObj];
	[real setGamecenter_id:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_Credentials_setOpen_udid_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	Credentials *real = (Credentials*) [proxy realObj];
	[real setOpen_udid:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_Credentials_setPassword_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	Credentials *real = (Credentials*) [proxy realObj];
	[real setPassword:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_Credentials_setTw_token_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	Credentials *real = (Credentials*) [proxy realObj];
	[real setTw_token:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_Credentials_setTw_token_secret_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	Credentials *real = (Credentials*) [proxy realObj];
	[real setTw_token_secret:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_Credentials_setTw_uid_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	Credentials *real = (Credentials*) [proxy realObj];
	[real setTw_uid:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSDictionary* (dict)
JSBool JSB_Credentials_toDictionary(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSDictionary* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real toDictionary ];

	jsval ret_jsval = NSDictionary_to_jsval( cx, (NSDictionary*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_Credentials_tw_token(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real tw_token ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_Credentials_tw_token_secret(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real tw_token_secret ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_Credentials_tw_uid(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	Credentials *real = (Credentials*) [proxy realObj];
	ret_val = [real tw_uid ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

void JSB_Credentials_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_Credentials_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_Credentials_class->name = name;
	JSB_Credentials_class->addProperty = JS_PropertyStub;
	JSB_Credentials_class->delProperty = JS_PropertyStub;
	JSB_Credentials_class->getProperty = JS_PropertyStub;
	JSB_Credentials_class->setProperty = JS_StrictPropertyStub;
	JSB_Credentials_class->enumerate = JS_EnumerateStub;
	JSB_Credentials_class->resolve = JS_ResolveStub;
	JSB_Credentials_class->convert = JS_ConvertStub;
	JSB_Credentials_class->finalize = JSB_Credentials_finalize;
	JSB_Credentials_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("email", JSB_Credentials_email, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("fb_access_token", JSB_Credentials_fb_access_token, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getFbUID", JSB_Credentials_fb_uid, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getGamecenterID", JSB_Credentials_gamecenter_id, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("create", JSB_Credentials_init, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getOpenUDID", JSB_Credentials_open_udid, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("password", JSB_Credentials_password, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEmail", JSB_Credentials_setEmail_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setFb_access_token", JSB_Credentials_setFb_access_token_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setFb_uid", JSB_Credentials_setFb_uid_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setGamecenter_id", JSB_Credentials_setGamecenter_id_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOpenUDID", JSB_Credentials_setOpen_udid_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setPassword", JSB_Credentials_setPassword_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTw_token", JSB_Credentials_setTw_token_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTw_token_secret", JSB_Credentials_setTw_token_secret_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTw_uid", JSB_Credentials_setTw_uid_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("toDictionary", JSB_Credentials_toDictionary, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("tw_token", JSB_Credentials_tw_token, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("tw_token_secret", JSB_Credentials_tw_token_secret, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getTwID", JSB_Credentials_tw_uid, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_Credentials_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_Credentials_class, JSB_Credentials_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_Credentials

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_Credentials_class, JSB_Credentials_object, NULL);
	JSB_Credentials *proxy = [[JSB_Credentials alloc] initWithJSObject:jsobj class:[Credentials class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * OpenUDID
 */
#pragma mark - OpenUDID

JSClass* JSB_OpenUDID_class = NULL;
JSObject* JSB_OpenUDID_object = NULL;
// Constructor
JSBool JSB_OpenUDID_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_OpenUDID createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_OpenUDID_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (OpenUDID)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSB_OpenUDID_setOptOut__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	[OpenUDID setOptOut:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_OpenUDID_value_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	ret_val = [OpenUDID value ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

void JSB_OpenUDID_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_OpenUDID_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_OpenUDID_class->name = name;
	JSB_OpenUDID_class->addProperty = JS_PropertyStub;
	JSB_OpenUDID_class->delProperty = JS_PropertyStub;
	JSB_OpenUDID_class->getProperty = JS_PropertyStub;
	JSB_OpenUDID_class->setProperty = JS_StrictPropertyStub;
	JSB_OpenUDID_class->enumerate = JS_EnumerateStub;
	JSB_OpenUDID_class->resolve = JS_ResolveStub;
	JSB_OpenUDID_class->convert = JS_ConvertStub;
	JSB_OpenUDID_class->finalize = JSB_OpenUDID_finalize;
	JSB_OpenUDID_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("setOptOut", JSB_OpenUDID_setOptOut__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("create", JSB_OpenUDID_value_static, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSB_OpenUDID_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_OpenUDID_class, JSB_OpenUDID_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_OpenUDID

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_OpenUDID_class, JSB_OpenUDID_object, NULL);
	JSB_OpenUDID *proxy = [[JSB_OpenUDID alloc] initWithJSObject:jsobj class:[OpenUDID class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * GamedoniaData
 */
#pragma mark - GamedoniaData

JSClass* JSB_GamedoniaData_class = NULL;
JSObject* JSB_GamedoniaData_object = NULL;
// Constructor
JSBool JSB_GamedoniaData_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GamedoniaData createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GamedoniaData_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GamedoniaData)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

void JSB_GamedoniaData_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GamedoniaData_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GamedoniaData_class->name = name;
	JSB_GamedoniaData_class->addProperty = JS_PropertyStub;
	JSB_GamedoniaData_class->delProperty = JS_PropertyStub;
	JSB_GamedoniaData_class->getProperty = JS_PropertyStub;
	JSB_GamedoniaData_class->setProperty = JS_StrictPropertyStub;
	JSB_GamedoniaData_class->enumerate = JS_EnumerateStub;
	JSB_GamedoniaData_class->resolve = JS_ResolveStub;
	JSB_GamedoniaData_class->convert = JS_ConvertStub;
	JSB_GamedoniaData_class->finalize = JSB_GamedoniaData_finalize;
	JSB_GamedoniaData_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("createWithCallback", JSB_GamedoniaData_create_entity_callback_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getWithCallback", JSB_GamedoniaData_get_entityId_callback_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("removeWithCallback", JSB_GamedoniaData_remove_entityId_callback_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("searchWithCallback", JSB_GamedoniaData_search_query_limit_sort_skip_callback_, 6, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("updateWithCallback", JSB_GamedoniaData_update_entity_overwrite_callback_, 4, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_GamedoniaData_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_GamedoniaData_class, JSB_GamedoniaData_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GamedoniaData

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GamedoniaData_class, JSB_GamedoniaData_object, NULL);
	JSB_GamedoniaData *proxy = [[JSB_GamedoniaData alloc] initWithJSObject:jsobj class:[GamedoniaData class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * GamedoniaDevice
 */
#pragma mark - GamedoniaDevice

JSClass* JSB_GamedoniaDevice_class = NULL;
JSObject* JSB_GamedoniaDevice_object = NULL;
// Constructor
JSBool JSB_GamedoniaDevice_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_GamedoniaDevice createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_GamedoniaDevice_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (GamedoniaDevice)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: GDDeviceProfile* (o)
JSBool JSB_GamedoniaDevice__device(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GDDeviceProfile* ret_val;

	GamedoniaDevice *real = (GamedoniaDevice*) [proxy realObj];
	ret_val = [real _device ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: None (None)
JSBool JSB_GamedoniaDevice_init(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && ![proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );

	GamedoniaDevice *real = [(GamedoniaDevice*)[proxy.klass alloc] init ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: GDDeviceProfile*
// Ret value: void (None)
JSBool JSB_GamedoniaDevice_set_device_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GamedoniaDevice *real = (GamedoniaDevice*) [proxy realObj];
	[real set_device:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSB_GamedoniaDevice_onLoginSuccess(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );

	GamedoniaDevice *real = (GamedoniaDevice*) [proxy realObj];
	[real onLoginSuccess ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_GamedoniaDevice_didReceiveRemotePushDeviceToken_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	GamedoniaDevice *real = (GamedoniaDevice*) [proxy realObj];
	[real didReceiveRemotePushDeviceToken:(NSString*)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

void JSB_GamedoniaDevice_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_GamedoniaDevice_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_GamedoniaDevice_class->name = name;
	JSB_GamedoniaDevice_class->addProperty = JS_PropertyStub;
	JSB_GamedoniaDevice_class->delProperty = JS_PropertyStub;
	JSB_GamedoniaDevice_class->getProperty = JS_PropertyStub;
	JSB_GamedoniaDevice_class->setProperty = JS_StrictPropertyStub;
	JSB_GamedoniaDevice_class->enumerate = JS_EnumerateStub;
	JSB_GamedoniaDevice_class->resolve = JS_ResolveStub;
	JSB_GamedoniaDevice_class->convert = JS_ConvertStub;
	JSB_GamedoniaDevice_class->finalize = JSB_GamedoniaDevice_finalize;
	JSB_GamedoniaDevice_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("_device", JSB_GamedoniaDevice__device, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("init", JSB_GamedoniaDevice_init, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("registerWithCallback", JSB_GamedoniaDevice_registerDevice_callback_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("set_device", JSB_GamedoniaDevice_set_device_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("onLoginSuccess", JSB_GamedoniaDevice_onLoginSuccess, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("didReceiveRemotePushDeviceToken", JSB_GamedoniaDevice_didReceiveRemotePushDeviceToken_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_GamedoniaDevice_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_GamedoniaDevice_class, JSB_GamedoniaDevice_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_GamedoniaDevice

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_GamedoniaDevice_class, JSB_GamedoniaDevice_object, NULL);
	JSB_GamedoniaDevice *proxy = [[JSB_GamedoniaDevice alloc] initWithJSObject:jsobj class:[GamedoniaDevice class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end


#endif // JSB_INCLUDE_GAMEDONIA
