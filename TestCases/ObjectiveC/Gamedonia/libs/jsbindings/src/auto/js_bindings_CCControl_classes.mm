/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by "generate_js_bindings.py -c CCControl.jsb.ini" on 2013-01-12
* Script version: v0.3
*/
#import "js_bindings_config.h"
#ifdef JSB_INCLUDE_CCCONTROL

#import "CCControlExtension.h"
#import "js_bindings_cocos2d_ios_classes.h"
#import "js_bindings_NS_manual.h"
#import "js_bindings_cocos2d_manual.h"

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jsfriendapi.h"
#import "js_bindings_config.h"
#import "js_bindings_core.h"

#import "js_bindings_CCControl_classes.h"


/*
 * CCControl
 */
#pragma mark - CCControl

JSClass* JSB_CCControl_class = NULL;
JSObject* JSB_CCControl_object = NULL;
// Constructor
JSBool JSB_CCControl_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_CCControl createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_CCControl_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (CCControl)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: ccColor3B ({_ccColor3B=CCC})
JSBool JSB_CCControl_color(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	ccColor3B ret_val;

	CCControl *real = (CCControl*) [proxy realObj];
	ret_val = [real color ];

	jsval ret_jsval = ccColor3B_to_jsval( cx, (ccColor3B)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSInteger (i)
JSBool JSB_CCControl_defaultTouchPriority(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSInteger ret_val;

	CCControl *real = (CCControl*) [proxy realObj];
	ret_val = [real defaultTouchPriority ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_CCControl_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	CCControl *real = (CCControl*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_CCControl_hasVisibleParents(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	CCControl *real = (CCControl*) [proxy realObj];
	ret_val = [real hasVisibleParents ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_CCControl_isEnabled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	CCControl *real = (CCControl*) [proxy realObj];
	ret_val = [real isEnabled ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_CCControl_isHighlighted(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	CCControl *real = (CCControl*) [proxy realObj];
	ret_val = [real isHighlighted ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_CCControl_isSelected(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	CCControl *real = (CCControl*) [proxy realObj];
	ret_val = [real isSelected ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSB_CCControl_needsLayout(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );

	CCControl *real = (CCControl*) [proxy realObj];
	[real needsLayout ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte (c)
JSBool JSB_CCControl_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GLubyte ret_val;

	CCControl *real = (CCControl*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: void (None)
JSBool JSB_CCControl_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	ccColor3B arg0; 

	ok &= jsval_to_ccColor3B( cx, *argvp++, (ccColor3B*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControl *real = (CCControl*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSInteger
// Ret value: void (None)
JSBool JSB_CCControl_setDefaultTouchPriority_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControl *real = (CCControl*) [proxy realObj];
	[real setDefaultTouchPriority:(NSInteger)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSB_CCControl_setEnabled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControl *real = (CCControl*) [proxy realObj];
	[real setEnabled:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSB_CCControl_setHighlighted_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControl *real = (CCControl*) [proxy realObj];
	[real setHighlighted:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: void (None)
JSBool JSB_CCControl_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint16_t arg0; 

	ok &= JS_ValueToUint16( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControl *real = (CCControl*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSB_CCControl_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControl *real = (CCControl*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSB_CCControl_setSelected_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControl *real = (CCControl*) [proxy realObj];
	[real setSelected:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CCControlState (u)
JSBool JSB_CCControl_state(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CCControlState ret_val;

	CCControl *real = (CCControl*) [proxy realObj];
	ret_val = [real state ];
	JS_SET_RVAL(cx, vp, UINT_TO_JSVAL((uint32_t)ret_val));
	return JS_TRUE;
}

void JSB_CCControl_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_CCControl_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_CCControl_class->name = name;
	JSB_CCControl_class->addProperty = JS_PropertyStub;
	JSB_CCControl_class->delProperty = JS_PropertyStub;
	JSB_CCControl_class->getProperty = JS_PropertyStub;
	JSB_CCControl_class->setProperty = JS_StrictPropertyStub;
	JSB_CCControl_class->enumerate = JS_EnumerateStub;
	JSB_CCControl_class->resolve = JS_ResolveStub;
	JSB_CCControl_class->convert = JS_ConvertStub;
	JSB_CCControl_class->finalize = JSB_CCControl_finalize;
	JSB_CCControl_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("getColor", JSB_CCControl_color, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getDefaultTouchPriority", JSB_CCControl_defaultTouchPriority, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("doesOpacityModifyRGB", JSB_CCControl_doesOpacityModifyRGB, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getHasVisibleParents", JSB_CCControl_hasVisibleParents, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isEnabled", JSB_CCControl_isEnabled, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isHighlighted", JSB_CCControl_isHighlighted, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("isSelected", JSB_CCControl_isSelected, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("needsLayout", JSB_CCControl_needsLayout, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getOpacity", JSB_CCControl_opacity, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setCallback", JSB_CCControl_setBlock_forControlEvents_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
        JS_FN("openURL", JSB_CCControl_openURL_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setColor", JSB_CCControl_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setDefaultTouchPriority", JSB_CCControl_setDefaultTouchPriority_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setEnabled", JSB_CCControl_setEnabled_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setHighlighted", JSB_CCControl_setHighlighted_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOpacity", JSB_CCControl_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOpacityModifyRGB", JSB_CCControl_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setSelected", JSB_CCControl_setSelected_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getState", JSB_CCControl_state, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_CCControl_object = JS_InitClass(cx, globalObj, JSB_CCLayer_object, JSB_CCControl_class, JSB_CCControl_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_CCControl

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_CCControl_class, JSB_CCControl_object, NULL);
	JSB_CCControl *proxy = [[JSB_CCControl alloc] initWithJSObject:jsobj class:[CCControl class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCScale9Sprite
 */
#pragma mark - CCScale9Sprite

JSClass* JSB_CCScale9Sprite_class = NULL;
JSObject* JSB_CCScale9Sprite_object = NULL;
// Constructor
JSBool JSB_CCScale9Sprite_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_CCScale9Sprite createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_CCScale9Sprite_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (CCScale9Sprite)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: CGRect (N/A)
JSBool JSB_CCScale9Sprite_capInsets(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CGRect ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real capInsets ];

	jsval ret_jsval = CGRect_to_jsval( cx, (CGRect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: ccColor3B ({_ccColor3B=CCC})
JSBool JSB_CCScale9Sprite_color(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	ccColor3B ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real color ];

	jsval ret_jsval = ccColor3B_to_jsval( cx, (ccColor3B)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_CCScale9Sprite_doesOpacityModifyRGB(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real doesOpacityModifyRGB ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: NSString*, CGRect
// Ret value: None (None)
JSBool JSB_CCScale9Sprite_initWithFile_capInsets_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && ![proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; CGRect arg1; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = [(CCScale9Sprite*)[proxy.klass alloc] initWithFile:(NSString*)arg0 capInsets:(CGRect)arg1  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGRect, CGRect
// Ret value: None (None)
JSBool JSB_CCScale9Sprite_initWithFile_rect_capInsets_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && ![proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc >= 1 && argc <= 3 , cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; CGRect arg1; CGRect arg2; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	if (argc >= 2) {
		ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg1 );
	}
	if (argc >= 3) {
		ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg2 );
	}
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	if( argc == 1 ) {
		CCScale9Sprite *real = [(CCScale9Sprite*)[proxy.klass alloc] initWithFile:(NSString*)arg0  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	}
	else if( argc == 2 ) {
		CCScale9Sprite *real = [(CCScale9Sprite*)[proxy.klass alloc] initWithFile:(NSString*)arg0 rect:(CGRect)arg1  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	}
	else if( argc == 3 ) {
		CCScale9Sprite *real = [(CCScale9Sprite*)[proxy.klass alloc] initWithFile:(NSString*)arg0 rect:(CGRect)arg1 capInsets:(CGRect)arg2  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	}
	else
		JSB_PRECONDITION3(NO, cx, JS_FALSE, "Error in number of arguments");

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCSpriteFrame*, CGRect
// Ret value: None (None)
JSBool JSB_CCScale9Sprite_initWithSpriteFrame_capInsets_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && ![proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc >= 1 && argc <= 2 , cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; CGRect arg1; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	if (argc >= 2) {
		ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg1 );
	}
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	if( argc == 1 ) {
		CCScale9Sprite *real = [(CCScale9Sprite*)[proxy.klass alloc] initWithSpriteFrame:arg0  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	}
	else if( argc == 2 ) {
		CCScale9Sprite *real = [(CCScale9Sprite*)[proxy.klass alloc] initWithSpriteFrame:arg0 capInsets:(CGRect)arg1  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	}
	else
		JSB_PRECONDITION3(NO, cx, JS_FALSE, "Error in number of arguments");

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, CGRect
// Ret value: None (None)
JSBool JSB_CCScale9Sprite_initWithSpriteFrameName_capInsets_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && ![proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc >= 1 && argc <= 2 , cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; CGRect arg1; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	if (argc >= 2) {
		ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg1 );
	}
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	if( argc == 1 ) {
		CCScale9Sprite *real = [(CCScale9Sprite*)[proxy.klass alloc] initWithSpriteFrameName:(NSString*)arg0  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	}
	else if( argc == 2 ) {
		CCScale9Sprite *real = [(CCScale9Sprite*)[proxy.klass alloc] initWithSpriteFrameName:(NSString*)arg0 capInsets:(CGRect)arg1  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	}
	else
		JSB_PRECONDITION3(NO, cx, JS_FALSE, "Error in number of arguments");

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSB_CCScale9Sprite_insetBottom(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	float ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real insetBottom ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSB_CCScale9Sprite_insetLeft(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	float ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real insetLeft ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSB_CCScale9Sprite_insetRight(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	float ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real insetRight ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: float (d)
JSBool JSB_CCScale9Sprite_insetTop(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	float ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real insetTop ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: GLubyte (c)
JSBool JSB_CCScale9Sprite_opacity(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	GLubyte ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real opacity ];
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize ({CGSize=ff})
JSBool JSB_CCScale9Sprite_originalSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CGSize ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real originalSize ];

	jsval ret_jsval = CGSize_to_jsval( cx, (CGSize)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize ({CGSize=ff})
JSBool JSB_CCScale9Sprite_preferedSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CGSize ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real preferedSize ];

	jsval ret_jsval = CGSize_to_jsval( cx, (CGSize)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: CGRect
// Ret value: CCScale9Sprite* (o)
JSBool JSB_CCScale9Sprite_resizableSpriteWithCapInsets_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	CGRect arg0; 

	ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCScale9Sprite* ret_val;

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	ret_val = [real resizableSpriteWithCapInsets:(CGRect)arg0  ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: CGRect
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setCapInsets_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	CGRect arg0; 

	ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setCapInsets:(CGRect)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ccColor3B
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setColor_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	ccColor3B arg0; 

	ok &= jsval_to_ccColor3B( cx, *argvp++, (ccColor3B*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setColor:(ccColor3B)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setInsetBottom_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setInsetBottom:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setInsetLeft_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setInsetLeft:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setInsetRight_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setInsetRight:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setInsetTop_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setInsetTop:(float)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: GLubyte
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setOpacity_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint16_t arg0; 

	ok &= JS_ValueToUint16( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setOpacity:(GLubyte)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setOpacityModifyRGB_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setOpacityModifyRGB:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setPreferedSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	CGSize arg0; 

	ok &= jsval_to_CGSize( cx, *argvp++, (CGSize*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setPreferedSize:(CGSize)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CCSpriteFrame*
// Ret value: void (None)
JSBool JSB_CCScale9Sprite_setSpriteFrame_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCScale9Sprite *real = (CCScale9Sprite*) [proxy realObj];
	[real setSpriteFrame:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*, CGRect
// Ret value: CCScale9Sprite* (o)
JSBool JSB_CCScale9Sprite_spriteWithFile_capInsets__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; CGRect arg1; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCScale9Sprite* ret_val;

	ret_val = [CCScale9Sprite spriteWithFile:(NSString*)arg0 capInsets:(CGRect)arg1  ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: NSString*, CGRect, CGRect
// Ret value: CCScale9Sprite* (o)
JSBool JSB_CCScale9Sprite_spriteWithFile_rect_capInsets__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc >= 1 && argc <= 3 , cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; CGRect arg1; CGRect arg2; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	if (argc >= 2) {
		ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg1 );
	}
	if (argc >= 3) {
		ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg2 );
	}
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCScale9Sprite* ret_val;

	if( argc == 1 ) {
		ret_val = [CCScale9Sprite spriteWithFile:(NSString*)arg0  ];
	}
	else if( argc == 2 ) {
		ret_val = [CCScale9Sprite spriteWithFile:(NSString*)arg0 rect:(CGRect)arg1  ];
	}
	else if( argc == 3 ) {
		ret_val = [CCScale9Sprite spriteWithFile:(NSString*)arg0 rect:(CGRect)arg1 capInsets:(CGRect)arg2  ];
	}
	else
		JSB_PRECONDITION3(NO, cx, JS_FALSE, "Error in number of arguments");


	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: CCSpriteFrame*, CGRect
// Ret value: CCScale9Sprite* (o)
JSBool JSB_CCScale9Sprite_spriteWithSpriteFrame_capInsets__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc >= 1 && argc <= 2 , cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; CGRect arg1; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	if (argc >= 2) {
		ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg1 );
	}
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCScale9Sprite* ret_val;

	if( argc == 1 ) {
		ret_val = [CCScale9Sprite spriteWithSpriteFrame:arg0  ];
	}
	else if( argc == 2 ) {
		ret_val = [CCScale9Sprite spriteWithSpriteFrame:arg0 capInsets:(CGRect)arg1  ];
	}
	else
		JSB_PRECONDITION3(NO, cx, JS_FALSE, "Error in number of arguments");


	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: NSString*, CGRect
// Ret value: CCScale9Sprite* (o)
JSBool JSB_CCScale9Sprite_spriteWithSpriteFrameName_capInsets__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc >= 1 && argc <= 2 , cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; CGRect arg1; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	if (argc >= 2) {
		ok &= jsval_to_CGRect( cx, *argvp++, (CGRect*) &arg1 );
	}
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCScale9Sprite* ret_val;

	if( argc == 1 ) {
		ret_val = [CCScale9Sprite spriteWithSpriteFrameName:(NSString*)arg0  ];
	}
	else if( argc == 2 ) {
		ret_val = [CCScale9Sprite spriteWithSpriteFrameName:(NSString*)arg0 capInsets:(CGRect)arg1  ];
	}
	else
		JSB_PRECONDITION3(NO, cx, JS_FALSE, "Error in number of arguments");


	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

void JSB_CCScale9Sprite_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_CCScale9Sprite_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_CCScale9Sprite_class->name = name;
	JSB_CCScale9Sprite_class->addProperty = JS_PropertyStub;
	JSB_CCScale9Sprite_class->delProperty = JS_PropertyStub;
	JSB_CCScale9Sprite_class->getProperty = JS_PropertyStub;
	JSB_CCScale9Sprite_class->setProperty = JS_StrictPropertyStub;
	JSB_CCScale9Sprite_class->enumerate = JS_EnumerateStub;
	JSB_CCScale9Sprite_class->resolve = JS_ResolveStub;
	JSB_CCScale9Sprite_class->convert = JS_ConvertStub;
	JSB_CCScale9Sprite_class->finalize = JSB_CCScale9Sprite_finalize;
	JSB_CCScale9Sprite_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("getCapInsets", JSB_CCScale9Sprite_capInsets, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getColor", JSB_CCScale9Sprite_color, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("doesOpacityModifyRGB", JSB_CCScale9Sprite_doesOpacityModifyRGB, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("_initWithFile", JSB_CCScale9Sprite_initWithFile_capInsets_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithFile", JSB_CCScale9Sprite_initWithFile_rect_capInsets_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithSpriteFrame", JSB_CCScale9Sprite_initWithSpriteFrame_capInsets_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithSpriteFrameName", JSB_CCScale9Sprite_initWithSpriteFrameName_capInsets_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getInsetBottom", JSB_CCScale9Sprite_insetBottom, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getInsetLeft", JSB_CCScale9Sprite_insetLeft, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getInsetRight", JSB_CCScale9Sprite_insetRight, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getInsetTop", JSB_CCScale9Sprite_insetTop, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getOpacity", JSB_CCScale9Sprite_opacity, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getOriginalSize", JSB_CCScale9Sprite_originalSize, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getPreferedSize", JSB_CCScale9Sprite_preferedSize, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getResizableSprite", JSB_CCScale9Sprite_resizableSpriteWithCapInsets_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setCapInsets", JSB_CCScale9Sprite_setCapInsets_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setColor", JSB_CCScale9Sprite_setColor_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setInsetBottom", JSB_CCScale9Sprite_setInsetBottom_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setInsetLeft", JSB_CCScale9Sprite_setInsetLeft_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setInsetRight", JSB_CCScale9Sprite_setInsetRight_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setInsetTop", JSB_CCScale9Sprite_setInsetTop_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOpacity", JSB_CCScale9Sprite_setOpacity_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setOpacityModifyRGB", JSB_CCScale9Sprite_setOpacityModifyRGB_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setPreferedSize", JSB_CCScale9Sprite_setPreferedSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setSpriteFrame", JSB_CCScale9Sprite_setSpriteFrame_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("_create", JSB_CCScale9Sprite_spriteWithFile_capInsets__static, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("create", JSB_CCScale9Sprite_spriteWithFile_rect_capInsets__static, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("createWithSpriteFrame", JSB_CCScale9Sprite_spriteWithSpriteFrame_capInsets__static, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("createWithSpriteFrameName", JSB_CCScale9Sprite_spriteWithSpriteFrameName_capInsets__static, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSB_CCScale9Sprite_object = JS_InitClass(cx, globalObj, JSB_CCNode_object, JSB_CCScale9Sprite_class, JSB_CCScale9Sprite_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_CCScale9Sprite

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_CCScale9Sprite_class, JSB_CCScale9Sprite_object, NULL);
	JSB_CCScale9Sprite *proxy = [[JSB_CCScale9Sprite alloc] initWithJSObject:jsobj class:[CCScale9Sprite class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCControlButton
 */
#pragma mark - CCControlButton

JSClass* JSB_CCControlButton_class = NULL;
JSObject* JSB_CCControlButton_object = NULL;
// Constructor
JSBool JSB_CCControlButton_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_CCControlButton createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_CCControlButton_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (CCControlButton)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	jsb_del_proxy_for_jsobject( obj );
}

// Arguments: 
// Ret value: CCScale9Sprite* (o)
JSBool JSB_CCControlButton_backgroundSprite(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CCScale9Sprite* ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real backgroundSprite ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: CCControlState
// Ret value: CCScale9Sprite* (o)
JSBool JSB_CCControlButton_backgroundSpriteForState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint32_t arg0; 

	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCScale9Sprite* ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real backgroundSpriteForState:(CCControlState)arg0  ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: CCScale9Sprite*
// Ret value: CCControlButton* (o)
JSBool JSB_CCControlButton_buttonWithBackgroundSprite__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCControlButton* ret_val;

	ret_val = [CCControlButton buttonWithBackgroundSprite:arg0  ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: CCNode*, CCScale9Sprite*
// Ret value: CCControlButton* (o)
JSBool JSB_CCControlButton_buttonWithLabel_backgroundSprite__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; id arg1; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	ok &= jsval_to_NSObject( cx, *argvp++, &arg1);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCControlButton* ret_val;

	ret_val = [CCControlButton buttonWithLabel:arg0 backgroundSprite:arg1  ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: NSString*, NSString*, NSUInteger
// Ret value: CCControlButton* (o)
JSBool JSB_CCControlButton_buttonWithTitle_fontName_fontSize__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; NSString* arg1; uint32_t arg2; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	ok &= jsval_to_NSString( cx, *argvp++, &arg1 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCControlButton* ret_val;

	ret_val = [CCControlButton buttonWithTitle:(NSString*)arg0 fontName:(NSString*)arg1 fontSize:(NSUInteger)arg2  ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_CCControlButton_currentTitle(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real currentTitle ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: ccColor3B ({_ccColor3B=CCC})
JSBool JSB_CCControlButton_currentTitleColor(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	ccColor3B ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real currentTitleColor ];

	jsval ret_jsval = ccColor3B_to_jsval( cx, (ccColor3B)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_CCControlButton_doesAdjustBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real doesAdjustBackgroundImage ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: CCScale9Sprite*
// Ret value: None (None)
JSBool JSB_CCControlButton_initWithBackgroundSprite_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && ![proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = [(CCControlButton*)[proxy.klass alloc] initWithBackgroundSprite:arg0  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: CCNode*, CCScale9Sprite*
// Ret value: None (None)
JSBool JSB_CCControlButton_initWithLabel_backgroundSprite_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && ![proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; id arg1; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	ok &= jsval_to_NSObject( cx, *argvp++, &arg1);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = [(CCControlButton*)[proxy.klass alloc] initWithLabel:arg0 backgroundSprite:arg1  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: NSString*, NSString*, NSUInteger
// Ret value: None (None)
JSBool JSB_CCControlButton_initWithTitle_fontName_fontSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && ![proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; NSString* arg1; uint32_t arg2; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	ok &= jsval_to_NSString( cx, *argvp++, &arg1 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = [(CCControlButton*)[proxy.klass alloc] initWithTitle:(NSString*)arg0 fontName:(NSString*)arg1 fontSize:(NSUInteger)arg2  ];
	[proxy setRealObj: real];
	[real autorelease];

	objc_setAssociatedObject(real, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
	[proxy release];
	JS_SET_RVAL(cx, vp, JSVAL_TRUE);
	return JS_TRUE;
}

// Arguments: 
// Ret value: CGPoint ({CGPoint=ff})
JSBool JSB_CCControlButton_labelAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CGPoint ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real labelAnchorPoint ];

	jsval ret_jsval = CGPoint_to_jsval( cx, (CGPoint)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize ({CGSize=ff})
JSBool JSB_CCControlButton_preferedSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CGSize ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real preferedSize ];

	jsval ret_jsval = CGSize_to_jsval( cx, (CGSize)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSB_CCControlButton_setAdjustBackgroundImage_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setAdjustBackgroundImage:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CCScale9Sprite*
// Ret value: void (None)
JSBool JSB_CCControlButton_setBackgroundSprite_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setBackgroundSprite:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CCScale9Sprite*, CCControlState
// Ret value: void (None)
JSBool JSB_CCControlButton_setBackgroundSprite_forState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; uint32_t arg1; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setBackgroundSprite:arg0 forState:(CCControlState)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CCSpriteFrame*, CCControlState
// Ret value: void (None)
JSBool JSB_CCControlButton_setBackgroundSpriteFrame_forState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; uint32_t arg1; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setBackgroundSpriteFrame:arg0 forState:(CCControlState)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CGPoint
// Ret value: void (None)
JSBool JSB_CCControlButton_setLabelAnchorPoint_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	CGPoint arg0; 

	ok &= jsval_to_CGPoint( cx, *argvp++, (CGPoint*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setLabelAnchorPoint:(CGPoint)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: void (None)
JSBool JSB_CCControlButton_setPreferedSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	CGSize arg0; 

	ok &= jsval_to_CGSize( cx, *argvp++, (CGSize*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setPreferedSize:(CGSize)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*, CCControlState
// Ret value: void (None)
JSBool JSB_CCControlButton_setTitle_forState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; uint32_t arg1; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setTitle:(NSString*)arg0 forState:(CCControlState)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*, CCControlState
// Ret value: void (None)
JSBool JSB_CCControlButton_setTitleBMFont_forState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; uint32_t arg1; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setTitleBMFont:(NSString*)arg0 forState:(CCControlState)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: ccColor3B, CCControlState
// Ret value: void (None)
JSBool JSB_CCControlButton_setTitleColor_forState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	ccColor3B arg0; uint32_t arg1; 

	ok &= jsval_to_ccColor3B( cx, *argvp++, (ccColor3B*) &arg0 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setTitleColor:(ccColor3B)arg0 forState:(CCControlState)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: void (None)
JSBool JSB_CCControlButton_setTitleLabel_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setTitleLabel:arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CCNode*, CCControlState
// Ret value: void (None)
JSBool JSB_CCControlButton_setTitleLabel_forState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; uint32_t arg1; 

	ok &= jsval_to_NSObject( cx, *argvp++, &arg0);
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setTitleLabel:arg0 forState:(CCControlState)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: NSString*, CCControlState
// Ret value: void (None)
JSBool JSB_CCControlButton_setTitleTTF_forState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; uint32_t arg1; 

	ok &= jsval_to_NSString( cx, *argvp++, &arg0 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setTitleTTF:(NSString*)arg0 forState:(CCControlState)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: float, CCControlState
// Ret value: void (None)
JSBool JSB_CCControlButton_setTitleTTFSize_forState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; uint32_t arg1; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setTitleTTFSize:(float)arg0 forState:(CCControlState)arg1  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSB_CCControlButton_setZoomOnTouchDown_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	[real setZoomOnTouchDown:(BOOL)arg0  ];
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: CCControlState
// Ret value: ccColor3B ({_ccColor3B=CCC})
JSBool JSB_CCControlButton_titleColorForState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint32_t arg0; 

	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	ccColor3B ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real titleColorForState:(CCControlState)arg0  ];

	jsval ret_jsval = ccColor3B_to_jsval( cx, (ccColor3B)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: CCControlState
// Ret value: NSString* (S)
JSBool JSB_CCControlButton_titleForState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint32_t arg0; 

	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	NSString* ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real titleForState:(CCControlState)arg0  ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCNode* (o)
JSBool JSB_CCControlButton_titleLabel(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CCNode* ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real titleLabel ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: CCControlState
// Ret value: CCNode* (o)
JSBool JSB_CCControlButton_titleLabelForState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint32_t arg0; 

	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	CCNode* ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real titleLabelForState:(CCControlState)arg0  ];

	JS_SET_RVAL(cx, vp, NSObject_to_jsval(cx, ret_val));

	return JS_TRUE;
}

// Arguments: CCControlState
// Ret value: NSString* (S)
JSBool JSB_CCControlButton_titleTTFForState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint32_t arg0; 

	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	NSString* ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real titleTTFForState:(CCControlState)arg0  ];

	jsval ret_jsval = NSString_to_jsval( cx, (NSString*) ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval );

	return JS_TRUE;
}

// Arguments: CCControlState
// Ret value: float (d)
JSBool JSB_CCControlButton_titleTTFSizeForState_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	uint32_t arg0; 

	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	float ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real titleTTFSizeForState:(CCControlState)arg0  ];
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_CCControlButton_zoomOnTouchDown(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) jsb_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION3( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	CCControlButton *real = (CCControlButton*) [proxy realObj];
	ret_val = [real zoomOnTouchDown ];
	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));
	return JS_TRUE;
}

void JSB_CCControlButton_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_CCControlButton_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_CCControlButton_class->name = name;
	JSB_CCControlButton_class->addProperty = JS_PropertyStub;
	JSB_CCControlButton_class->delProperty = JS_PropertyStub;
	JSB_CCControlButton_class->getProperty = JS_PropertyStub;
	JSB_CCControlButton_class->setProperty = JS_StrictPropertyStub;
	JSB_CCControlButton_class->enumerate = JS_EnumerateStub;
	JSB_CCControlButton_class->resolve = JS_ResolveStub;
	JSB_CCControlButton_class->convert = JS_ConvertStub;
	JSB_CCControlButton_class->finalize = JSB_CCControlButton_finalize;
	JSB_CCControlButton_class->flags = JSCLASS_HAS_RESERVED_SLOTS(3);

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("getBackgroundSprite", JSB_CCControlButton_backgroundSprite, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getBackgroundSpriteForState", JSB_CCControlButton_backgroundSpriteForState_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getCurrentTitle", JSB_CCControlButton_currentTitle, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getCurrentTitleColor", JSB_CCControlButton_currentTitleColor, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("doesAdjustBackgroundImage", JSB_CCControlButton_doesAdjustBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithBackgroundSprite", JSB_CCControlButton_initWithBackgroundSprite_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithLabelBackgroundSprite", JSB_CCControlButton_initWithLabel_backgroundSprite_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("initWithTitleFontNameFontSize", JSB_CCControlButton_initWithTitle_fontName_fontSize_, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getLabelAnchorPoint", JSB_CCControlButton_labelAnchorPoint, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getPreferedSize", JSB_CCControlButton_preferedSize, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setAdjustBackgroundImage", JSB_CCControlButton_setAdjustBackgroundImage_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setBackgroundSprite", JSB_CCControlButton_setBackgroundSprite_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setBackgroundSpriteForState", JSB_CCControlButton_setBackgroundSprite_forState_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setBackgroundSpriteFrameForState", JSB_CCControlButton_setBackgroundSpriteFrame_forState_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setLabelAnchorPoint", JSB_CCControlButton_setLabelAnchorPoint_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setPreferedSize", JSB_CCControlButton_setPreferedSize_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTitleForState", JSB_CCControlButton_setTitle_forState_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTitleBMFontForState", JSB_CCControlButton_setTitleBMFont_forState_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTitleColorForState", JSB_CCControlButton_setTitleColor_forState_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTitleLabel", JSB_CCControlButton_setTitleLabel_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTitleLabelForState", JSB_CCControlButton_setTitleLabel_forState_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTitleTTFForState", JSB_CCControlButton_setTitleTTF_forState_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setTitleTTFSizeForState", JSB_CCControlButton_setTitleTTFSize_forState_, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("setZoomOnTouchDown", JSB_CCControlButton_setZoomOnTouchDown_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getTitleColorForState", JSB_CCControlButton_titleColorForState_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getTitleForState", JSB_CCControlButton_titleForState_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getTitleLabel", JSB_CCControlButton_titleLabel, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getTitleLabelForState", JSB_CCControlButton_titleLabelForState_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getTitleTTFForState", JSB_CCControlButton_titleTTFForState_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getTitleTTFSizeForState", JSB_CCControlButton_titleTTFSizeForState_, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("getZoomOnTouchDown", JSB_CCControlButton_zoomOnTouchDown, 0, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("createWithSprite", JSB_CCControlButton_buttonWithBackgroundSprite__static, 1, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("createWithLabel", JSB_CCControlButton_buttonWithLabel_backgroundSprite__static, 2, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FN("createWithTitle", JSB_CCControlButton_buttonWithTitle_fontName_fontSize__static, 3, JSPROP_PERMANENT | JSPROP_SHARED | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSB_CCControlButton_object = JS_InitClass(cx, globalObj, JSB_CCControl_object, JSB_CCControlButton_class, JSB_CCControlButton_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_CCControlButton

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_CCControlButton_class, JSB_CCControlButton_object, NULL);
	JSB_CCControlButton *proxy = [[JSB_CCControlButton alloc] initWithJSObject:jsobj class:[CCControlButton class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end


#endif // JSB_INCLUDE_CCCONTROL
